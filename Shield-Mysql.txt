Meta Data:
-------------------------------------------------
26500 rows

dim_date:  date, mmm_yy, day_type, week_no
dim_customer: customer_code, dob, city
dim_policies: policy_id, base_cover, base_premium_amt
fact_premiums: date, customer_code, policy_id, sales_mode, final_premium_amt
fact_settlements: age, settlement_pct

**************************************************
		1. Revenue Queries
**************************************************
SELECT   round(SUM(final_premium_amt)/1000000,2) as revenue 
FROM fact_premiums;
===================
SELECT   month(date), year(date),   
round(SUM(final_premium_amt)/1000000,2) as revenue 
FROM fact_premiums 
GROUP BY month(date),year(date);
========================
WITH month_revenue AS (
    SELECT
        YEAR(date)  AS year,
        MONTH(date) AS month,
        ROUND(SUM(final_premium_amt)/1000000,2) AS revenue
    FROM fact_premiums
    GROUP BY YEAR(date), MONTH(date)
)
SELECT
    year,
    month,
    revenue,
    LAG(revenue) OVER (ORDER BY year, month) AS prev_month_revenue
FROM month_revenue
ORDER BY year, month;
=====================================
WITH month_revenue AS (
    SELECT
        YEAR(date)  AS year,
        MONTH(date) AS month,
        ROUND(SUM(final_premium_amt)/1000000, 2) AS revenue
    FROM fact_premiums
    GROUP BY YEAR(date), MONTH(date)
)
SELECT
    year,
    month,
    revenue,
    LAG(revenue) OVER (ORDER BY year, month) AS prev_month_revenue,
    ROUND(
        ((revenue - LAG(revenue) OVER (ORDER BY year, month)) * 100.0)
        / NULLIF(LAG(revenue) OVER (ORDER BY year, month), 0),
        2
    ) AS mom_pct
FROM month_revenue
ORDER BY year, month;
***********************************************************
		2. Customer Queries
***********************************************************
SELECT   COUNT(DISTINCT customer_code) as customers_count 
FROM fact_premiums; 
====================================================
SELECT   month(date), year(date),   
COUNT(DISTINCT customer_code) as customers_count 
FROM fact_premiums  
GROUP by month(date),year(date);
=======================================
WITH monthly_counts AS (
	SELECT   month(date) as month, 
                                     year(date) as year,   
	COUNT(DISTINCT customer_code) as customers_count 
	FROM fact_premiums  
	GROUP by year(date), month(date) )

SELECT
  month,  year,  customers_count,
  LAG(customers_count) OVER (ORDER BY year, month) AS prev_month_count
FROM monthly_counts
ORDER BY year, month;
===========================================
WITH monthly_counts AS (
	SELECT   month(date) as month, 
                                     year(date) as year,   
	COUNT(DISTINCT customer_code) as customers_count 
	FROM fact_premiums  
	GROUP by year(date), month(date) )

SELECT
  month,  year,  customers_count,
  LAG(customers_count) OVER (ORDER BY year, month) AS prev_month_count,
  ROUND(  100.0 * (customers_count - LAG(customers_count) OVER (ORDER BY year,month))
    / NULLIF(LAG(customers_count) OVER (ORDER BY year,month), 0),2)  AS percent_change
FROM monthly_counts
ORDER BY year, month;
*******************************************************
		3. City Segmentation
*******************************************************
DELIMITER //

CREATE PROCEDURE customer_segmentation(IN inp_city TEXT)
BEGIN
    SELECT 
        MONTH(f.date) AS month,
        YEAR(f.date) AS year,
        COUNT(DISTINCT f.customer_code) AS customers_count,
        ROUND(SUM(f.final_premium_amt) / 1000000, 2) AS revenue
    FROM fact_premiums f
    join dim_customer dc
    on f.customer_code = dc.customer_code
    where dc.city = inp_city
    GROUP by month(date), year(date);
END;
//

DELIMITER ;
===========================================
CALL customer_segmentation("Delhi NCR");
************************************************************
		4. policy performance
************************************************************
DELIMITER //

CREATE PROCEDURE policy_performance(IN inp_policy_id TEXT)
BEGIN
    SELECT 
        MONTH(f.date) AS month,
        YEAR(f.date) AS year,
        COUNT(DISTINCT f.customer_code) AS customers_count,
        ROUND(SUM(f.final_premium_amt) / 1000000, 2) AS revenue
    FROM fact_premiums f
    JOIN dim_policies dp ON f.policy_id = dp.policy_id
    WHERE f.policy_id = inp_policy_id
    GROUP BY YEAR(f.date), MONTH(f.date);
END;
//

DELIMITER ;
===========================================
CALL policy_performance("POL2005HEL");
*******************************************************
		5. sales mode performance
********************************************************
SELECT  sales_mode, 
COUNT(DISTINCT customer_code) AS customers_count,
ROUND(SUM(final_premium_amt) / 1000000, 2) AS revenue
FROM fact_premiums
GROUP BY sales_mode;
=====================================================
with city_mode as (
SELECT f.sales_mode as sm, 
dc.city as location,
COUNT(DISTINCT f.customer_code) AS customers_count
FROM fact_premiums f
join dim_customer dc
on f.customer_code = dc.customer_code
GROUP BY f.sales_mode,dc.city )

select sm, location,  customers_count,
dense_rank() over (partition by location order  by customers_count desc) as city_rank
from city_mode;
************************************************************************
		6. Age Group Analysis
*****************************************************************
Alter table dim_customer 
add age int;
============================================
UPDATE dim_customer
SET age = TIMESTAMPDIFF(YEAR, dob, CURDATE());
============================================
Alter table dim_customer 
add age_group text;
============================================
UPDATE dim_customer
SET age_group = CASE
    WHEN age BETWEEN 18 AND 24 THEN '18-24'
    WHEN age BETWEEN 25 AND 30 THEN '25-30'
    WHEN age BETWEEN 31 AND 40 THEN '31-40'
    WHEN age BETWEEN 41 AND 50 THEN '41-50'
    WHEN age BETWEEN 51 AND 65 THEN '51-65'
    WHEN age >= 66 THEN '65+'
    ELSE 'Unknown'
END;
============================================
select dc.age_group, 
round(avg(fs.settlement_pct),2) as avg_settlement
from fact_settlements fs
join dim_customer dc
on dc.age = fs. age
group by dc.age_group;
======================================
SELECT  dc.age_group, 
COUNT(DISTINCT fp.customer_code) AS customers_count,
ROUND(SUM(fp.final_premium_amt) / 1000000, 2) AS revenue
FROM fact_premiums fp
join dim_customer dc 
on fp.customer_code = dc.customer_code
GROUP BY dc.age_group;
========================================
SELECT 
  fp.sales_mode, 
  dc.age_group,
  COUNT(DISTINCT fp.customer_code) AS customers_count,
  ROUND(SUM(fp.final_premium_amt) / 1000000, 2) AS revenue
FROM fact_premiums fp
JOIN dim_customer dc ON fp.customer_code = dc.customer_code
GROUP BY fp.sales_mode, dc.age_group;

=================================================
                               Top 5 premiums
===================================================
-- Top 5 Customers by Total Premium
SELECT 
    fp.customer_code,
    ROUND(SUM(fp.final_premium_amt),2) AS total_paid
FROM fact_premiums fp
GROUP BY fp.customer_code
ORDER BY total_paid DESC
LIMIT 5;
==========================================
 -- Top 5 Distinct Premium amounts
SELECT distinct final_premium_amt
    FROM fact_premiums
    ORDER BY final_premium_amt DESC
    LIMIT 5;
=================================================
-- policy count 
SELECT customer_code,
       COUNT(DISTINCT policy_id) AS policy_count,
       SUM(final_premium_amt) AS total_premium
FROM fact_premiums
GROUP BY customer_code
HAVING policy_count > 1
ORDER BY total_premium DESC;

=====================================================
-- Policies with Average Premium
SELECT 
    dp.policy_id,
    ROUND(AVG(fp.final_premium_amt),2) AS final_avg_premium
FROM fact_premiums fp
JOIN dim_policies dp ON fp.policy_id = dp.policy_id
GROUP BY dp.policy_id
ORDER BY final_avg_premium DESC;
==============================================
-- Sales Mode Performance
SELECT 
    sales_mode,
    COUNT(*) AS policies_sold,
    ROUND(SUM(final_premium_amt),2) AS total_premium
FROM fact_premiums
GROUP BY sales_mode
ORDER BY total_premium DESC;
===============================
-- city performance

SELECT 
    dc.city,
   COUNT(DISTINCT fp.customer_code) AS customers_count,
   ROUND(SUM(final_premium_amt) / 1000000, 2) AS revenue
FROM fact_premiums fp
JOIN dim_customer dc ON fp.customer_code = dc.customer_code
GROUP BY dc.city
ORDER BY revenue DESC;
=======================================

